{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\SoftGraphixs\\\\Desktop\\\\Temporal\\\\React\\\\new_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\SoftGraphixs\\\\Desktop\\\\Temporal\\\\React\\\\new_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\SoftGraphixs\\\\Desktop\\\\Temporal\\\\React\\\\new_project\\\\src\\\\views\\\\UserList\\\\components\\\\UsersTable\\\\UsersTable.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nimport { getInitials } from 'helpers';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1050\n  },\n  nameContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  avatar: {\n    marginRight: theme.spacing(2)\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst UsersTable = props => {\n  const className = props.className,\n        users = props.users,\n        rest = _objectWithoutProperties(props, [\"className\", \"users\"]);\n\n  const classes = useStyles();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedUsers = _useState2[0],\n        setSelectedUsers = _useState2[1];\n\n  const _useState3 = useState(10),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsPerPage = _useState4[0],\n        setRowsPerPage = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        page = _useState6[0],\n        setPage = _useState6[1];\n\n  const handleSelectAll = event => {\n    const users = props.users;\n    let selectedUsers;\n\n    if (event.target.checked) {\n      selectedUsers = users.map(user => user.id);\n    } else {\n      selectedUsers = [];\n    }\n\n    setSelectedUsers(selectedUsers);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedUsers.indexOf(id);\n    let newSelectedUsers = [];\n\n    if (selectedIndex === -1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\n    } else if (selectedIndex === 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\n    } else if (selectedIndex === selectedUsers.length - 1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, selectedIndex), selectedUsers.slice(selectedIndex + 1));\n    }\n\n    setSelectedUsers(newSelectedUsers);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  return React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.inner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.length === users.length,\n    color: \"primary\",\n    indeterminate: selectedUsers.length > 0 && selectedUsers.length < users.length,\n    onChange: handleSelectAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Name\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Email\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Location\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Phone\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Registration date\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, users.slice(0, rowsPerPage).map(user => React.createElement(TableRow, {\n    className: classes.tableRow,\n    hover: true,\n    key: user.id,\n    selected: selectedUsers.indexOf(user.id) !== -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.indexOf(user.id) !== -1,\n    color: \"primary\",\n    onChange: event => handleSelectOne(event, user.id),\n    value: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.nameContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatar,\n    src: user.avatarUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, getInitials(user.name)), React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, user.name))), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, user.email), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, user.address.city, \", \", user.address.state, \",\", ' ', user.address.country), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, user.phone), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, moment(user.createdAt).format('DD/MM/YYYY'))))))))), React.createElement(CardActions, {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    component: \"div\",\n    count: users.length,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleRowsPerPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [5, 10, 25],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  })));\n};\n\nUsersTable.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.array.isRequired\n};\nexport default UsersTable;","map":{"version":3,"sources":["C:\\Users\\SoftGraphixs\\Desktop\\Temporal\\React\\new_project\\src\\views\\UserList\\components\\UsersTable\\UsersTable.js"],"names":["React","useState","clsx","PropTypes","moment","PerfectScrollbar","makeStyles","Card","CardActions","CardContent","Avatar","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","getInitials","useStyles","theme","root","content","padding","inner","minWidth","nameContainer","display","alignItems","avatar","marginRight","spacing","actions","justifyContent","UsersTable","props","className","users","rest","classes","selectedUsers","setSelectedUsers","rowsPerPage","setRowsPerPage","page","setPage","handleSelectAll","event","target","checked","map","user","id","handleSelectOne","selectedIndex","indexOf","newSelectedUsers","concat","slice","length","handlePageChange","handleRowsPerPageChange","value","tableRow","avatarUrl","name","email","address","city","state","country","phone","createdAt","format","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Avatar,\r\n  Checkbox,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  TablePagination\r\n} from '@material-ui/core';\r\n\r\nimport { getInitials } from 'helpers';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {},\r\n  content: {\r\n    padding: 0\r\n  },\r\n  inner: {\r\n    minWidth: 1050\r\n  },\r\n  nameContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  avatar: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  actions: {\r\n    justifyContent: 'flex-end'\r\n  }\r\n}));\r\n\r\nconst UsersTable = props => {\r\n  const { className, users, ...rest } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [page, setPage] = useState(0);\r\n\r\n  const handleSelectAll = event => {\r\n    const { users } = props;\r\n\r\n    let selectedUsers;\r\n\r\n    if (event.target.checked) {\r\n      selectedUsers = users.map(user => user.id);\r\n    } else {\r\n      selectedUsers = [];\r\n    }\r\n\r\n    setSelectedUsers(selectedUsers);\r\n  };\r\n\r\n  const handleSelectOne = (event, id) => {\r\n    const selectedIndex = selectedUsers.indexOf(id);\r\n    let newSelectedUsers = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\r\n    } else if (selectedIndex === selectedUsers.length - 1) {\r\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelectedUsers = newSelectedUsers.concat(\r\n        selectedUsers.slice(0, selectedIndex),\r\n        selectedUsers.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelectedUsers(newSelectedUsers);\r\n  };\r\n\r\n  const handlePageChange = (event, page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const handleRowsPerPageChange = event => {\r\n    setRowsPerPage(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <CardContent className={classes.content}>\r\n        <PerfectScrollbar>\r\n          <div className={classes.inner}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                      checked={selectedUsers.length === users.length}\r\n                      color=\"primary\"\r\n                      indeterminate={\r\n                        selectedUsers.length > 0 &&\r\n                        selectedUsers.length < users.length\r\n                      }\r\n                      onChange={handleSelectAll}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell>Email</TableCell>\r\n                  <TableCell>Location</TableCell>\r\n                  <TableCell>Phone</TableCell>\r\n                  <TableCell>Registration date</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {users.slice(0, rowsPerPage).map(user => (\r\n                  <TableRow\r\n                    className={classes.tableRow}\r\n                    hover\r\n                    key={user.id}\r\n                    selected={selectedUsers.indexOf(user.id) !== -1}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={selectedUsers.indexOf(user.id) !== -1}\r\n                        color=\"primary\"\r\n                        onChange={event => handleSelectOne(event, user.id)}\r\n                        value=\"true\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className={classes.nameContainer}>\r\n                        <Avatar\r\n                          className={classes.avatar}\r\n                          src={user.avatarUrl}\r\n                        >\r\n                          {getInitials(user.name)}\r\n                        </Avatar>\r\n                        <Typography variant=\"body1\">{user.name}</Typography>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>{user.email}</TableCell>\r\n                    <TableCell>\r\n                      {user.address.city}, {user.address.state},{' '}\r\n                      {user.address.country}\r\n                    </TableCell>\r\n                    <TableCell>{user.phone}</TableCell>\r\n                    <TableCell>\r\n                      {moment(user.createdAt).format('DD/MM/YYYY')}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </PerfectScrollbar>\r\n      </CardContent>\r\n      <CardActions className={classes.actions}>\r\n        <TablePagination\r\n          component=\"div\"\r\n          count={users.length}\r\n          onChangePage={handlePageChange}\r\n          onChangeRowsPerPage={handleRowsPerPageChange}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n        />\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nUsersTable.propTypes = {\r\n  className: PropTypes.string,\r\n  users: PropTypes.array.isRequired\r\n};\r\n\r\nexport default UsersTable;\r\n"]},"metadata":{},"sourceType":"module"}